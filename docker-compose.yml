version: "3.9"
services:
  postgres:
    image: postgres:14.1-alpine
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - database.dev
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pguser
      POSTGRES_DB: pgdb
    ports:
      - "5432:5432"

  webserver:
    depends_on:
      - postgres
    build:
      context: webserver/
    restart: unless-stopped
    ports:
      - "5000:5000"
    #environment:
    #  MONGODB_HOST: mongodb
    #  MONGODB_USERNAME: "apiuser"
    #  MONGODB_PASSWORD: "apipassword"
    volumes:
      - appdata:/var/www/
    networks:
      - frontend
      - backend

  view:
    depends_on:
      - webserver
    build:
      context: view/
    ports:
      - "3000:80"
    volumes:
      - ./view:/app
      - /app/node_modules
    networks:
      - frontend

  analysis:
    depends_on:
      - webserver
    build:
      context: analysis/
    ports:
      - "5001:5001"
    volumes:
      - nltkdata:/root/nltk_data
    networks:
      backend:
        aliases:
          - analysis.dev

  fetcher:
    depends_on:
      - webserver
    build:
      context: fetcher/
    ports:
      - "5002:5002"
    networks:
      backend:
        aliases:
          - fetcher.dev

  authentication:
    depends_on:
      - postgres
    image: joshjamison/easyauth:1.0.19
    environment:
      - DB_TYPE=postgres
      - DB_NAME=pgdb
      - DB_HOST=database.dev
      - DB_PORT=5432
      - DB_USER=pguser
      - DB_PASSWORD=pguser
      - ISSUER=EasyAuth
      - SUBJECT=EasyAuthAuth
      - AUDIENCE=EasyAuthApis
      - KEY_PATH=/mnt/easyauth
      - KEY_NAME=test_key
      - AUTH_SECRET=my-secret
      - ADMIN_PREFIX=/admin
      - ADMIN_TITLE="EasyAuth - Example'
      - AUTH_WORKERS=1
    volumes:
      - auth:/mnt/easyauth
    ports:
      - '5003:8220'
      - "5004:8092"
    networks:
      backend:
        aliases:
          - authentication.dev

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  db-data:
    driver: local
  appdata:
    driver: local
  nltkdata:
    driver: local
  auth:
    driver: local
